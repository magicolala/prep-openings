from pathlib import Path

path = Path('src/App.tsx')
text = path.read_text(encoding='latin-1')
marker = '  const toggleVoiceListening = () => {'
if 'const handleVoiceCommand' not in text:
    block = """  const handleVoiceCommand = useCallback(async (utterance: string) => {\n    setVoiceStatus('processing');\n    setVoiceTranscript(utterance);\n    const normalized = utterance.toLowerCase();\n    const sanitized = normalized.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    const respond = (message: string) => {\n      setVoiceResponse(message);\n      setAssistantMessage(message);\n      setVoiceStatus('idle');\n    };\n\n    if (!sanitized.trim()) {\n      respond('Commande vide.');\n      return;\n    }\n\n    const includes = (segment: string) => sanitized.includes(segment);\n    const includesAny = (...segments: string[]) => segments.some(segment => includes(segment));\n\n    if (includesAny('mode sombre', 'mode nuit', 'dark')) {\n      if (appearance !== 'dark') setAppearance('dark');\n      respond('Theme nuit active.');\n      return;\n    }\n\n    if (includesAny('mode clair', 'mode jour', 'light')) {\n      if (appearance !== 'light') setAppearance('light');\n      respond('Theme jour active.');\n      return;\n    }\n\n    if (includesAny('mode auto', 'automatique')) {\n      if (appearance !== 'auto') setAppearance('auto');\n      respond('Theme auto synchronise.');\n      return;\n    }\n\n    if (includes('mode eco')) {\n      const wantsDisable = includes('desactive') || includes('retire') || includes('coupe');\n      if (wantsDisable) {\n        if (ecoMode) toggleEcoMode();\n        respond('Mode eco desactive.');\n        return;\n      }\n      if (!ecoMode) toggleEcoMode();\n      respond('Mode eco active.');\n      return;\n    }\n\n    if (includesAny('motion douce', 'animation douce', 'calme', 'slow')) {\n      if (motion !== 'calm') setMotion('calm');\n      respond('Animations adoucies.');\n      return;\n    }\n\n    if (includesAny('motion vive', 'animation rapide', 'dynamique')) {\n      if (motion !== 'dynamic') setMotion('dynamic');\n      respond('Animations dynamiques activees.');\n      return;\n    }\n\n    if (includesAny('layout compact', 'densite compacte', 'compact', 'dense')) {\n      if (density !== 'compact') setDensity('compact');\n      respond('Layout compact active.');\n      return;\n    }\n\n    if (includesAny('layout ample', 'densite confortable', 'confortable', 'large')) {\n      if (density !== 'comfortable') setDensity('comfortable');\n      respond('Layout ample active.');\n      return;\n    }\n\n    if (includesAny('couleur', 'accent')) {\n      for (const preset of ACCENT_PRESETS) {\n        if (preset.keywords.some(keyword => includes(keyword))) {\n          if (accentHue !== preset.hue) setAccentHue(preset.hue);\n          respond(Accent  active.);\n          return;\n        }\n      }\n      respond('Dis une couleur: violet, corail, emeraude, solaire ou ocean.');\n      return;\n    }\n\n    if (includes('chapitre') || includes('section')) {\n      if (includesAny('brief', 'contexte')) {\n        setManualChapter('context');\n        setActiveChapter('context');\n        respond('Chapitre brief affiche.');\n        return;\n      }\n      if (includesAny('collecte', 'scout')) {\n        setManualChapter('scouting');\n        setActiveChapter('scouting');\n        respond('Chapitre collecte active.');\n        return;\n      }\n      if (includes('analyse')) {\n        setManualChapter('analysis');\n        setActiveChapter('analysis');\n        respond('Chapitre analyse active.');\n        return;\n      }\n      if (includesAny('plan', 'prep', 'preparation')) {\n        setManualChapter('prep');\n        setActiveChapter('prep');\n        respond('Chapitre plan ouvert.');\n        return;\n      }\n      respond('Chapitre non reconnu.');\n      return;\n    }\n\n    if (includesAny('relance', 'relancer', 'relance analyse', 'rejoue')) {\n      if (lastRun) {\n        await run(lastRun.you, lastRun.opponent);\n        respond(Je relance l'analyse pour  contre .);\n        return;\n      }\n      respond('Aucune analyse memorisee.');\n      return;\n    }\n\n    if (includes('debug')) {\n      const wantsClose = includes('ferme') || includes('masque') || includes('cache');\n      if (wantsClose) {\n        setDebugOpen(false);\n        respond('Console debug masquee.');\n        return;\n      }\n      setDebugOpen(true);\n      respond('Console debug affichee.');\n      return;\n    }\n\n    if (includes('assistant vocal') && includesAny('desactive', 'coupe', 'stop')) {\n      if (voiceEnabled) toggleVoice();\n      respond('Assistant vocal desactive.');\n      return;\n    }\n\n    if (includes('assistant vocal') && includesAny('active', 'demarre', 'lance')) {\n      if (!voiceEnabled) toggleVoice();\n      respond('Assistant vocal active.');\n      return;\n    }\n\n    respond('Commande non reconnue.');\n  }, [accentHue, appearance, density, ecoMode, lastRun, motion, run, setAccentHue, setActiveChapter, setAppearance, setAssistantMessage, setDensity, setManualChapter, setMotion, setVoiceResponse, setVoiceStatus, toggleEcoMode, toggleVoice, voiceEnabled]);\n\n"""
    text = text.replace(marker, block + marker)
    path.write_text(text, encoding='latin-1')
